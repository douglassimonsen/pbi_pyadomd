# ruff: noqa: N802, N999, PYI021

from enum import IntEnum
from types import TracebackType
from typing import Any, Iterator, NamedTuple, Self

import bs4

from .Microsoft.AnalysisServices.AdomdClient import AdomdConnection

class ReaderType:
    """Actually just called Type, but prefix for clarity."""

    def ToString(self) -> str: ...

class AdmomdState(IntEnum):
    OPEN = 1
    CLOSED = 0

class IDataReader:
    @property
    def IsClosed(self) -> bool: ...
    def Close(self) -> None: ...
    def ReadOuterXml(self) -> str: ...
    def GetName(self, idx: int) -> str: ...
    def GetFieldType(self, idx: int) -> ReaderType: ...
    def __getitem__(self, idx: int) -> Any: ...
    def Read(self) -> bool: ...

class AdomdErrorResponseException(BaseException):
    Message: str

class Description(NamedTuple):
    name: str
    type_code: str

class Cursor:
    _reader: "IDataReader"
    _conn: AdomdConnection

    def __init__(self, connection: AdomdConnection) -> None: ...
    def close(self) -> None: ...
    def execute_xml(
        self, query: str, query_name: str | None = None
    ) -> bs4.BeautifulSoup: ...
    def execute_dax(self, query: str, query_name: str | None = None) -> Self: ...
    def fetchone(self) -> Iterator[tuple[Any, ...]]: ...
    def fetchmany(self, size: int = 1) -> list[tuple[Any, ...]]: ...
    def fetchall(self) -> list[tuple[Any, ...]]: ...
    @property
    def is_closed(self) -> bool: ...
    @property
    def description(self) -> list[Description]: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: "TracebackType | None",  # noqa: PYI036
    ) -> None: ...

class Pyadomd:
    conn: AdomdConnection
    def __init__(self, conn_str: str) -> None: ...
    def close(self) -> None: ...
    def open(self) -> Self: ...
    def cursor(self) -> Cursor: ...
    @property
    def state(self) -> AdmomdState: ...
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: "TracebackType | None",  # noqa: PYI036
    ) -> None: ...
